import Head from 'next/head'
import Link from 'next/link'
import { useState, useEffect, use } from "react";

function Metric(id, total, reward) {
  this.id = id;
  this.total = total;
  this.reward = reward;
}

export default function Home() {
  const [metrics, setMetrics] = useState(() => {
    if (typeof window !== 'undefined') {
      const data = window.localStorage.getItem('MY_APP_STATE');
      return data !== null ? JSON.parse(data) : [
        new Metric(1, 1, 1),
        new Metric(2, 1, 1),
        new Metric(3, 1, 1),
      ];
    } else {
      return [
        new Metric(1, 1, 1),
        new Metric(2, 1, 1),
        new Metric(3, 1, 1),
      ];
    }
  });
  
  const option1 = "Click here to play!";
  const option2 = "Play now!";
  const option3 = "Play the game!";
  const labelOptions = [option1, option2, option3];

  const [buttonText, setButtonText] = useState("");

  const option_1 = metrics.find((metric) => metric.id === 1);
  const option_2 = metrics.find((metric) => metric.id === 2);
  const option_3 = metrics.find((metric) => metric.id === 3);

  const option_1_reward = option_1.reward;
  const option_2_reward = option_2.reward;
  const option_3_reward = option_3.reward;

  const option_1_total = option_1.total;
  const option_2_total = option_2.total;
  const option_3_total = option_3.total;

  const rewards = [
    option_1_reward / option_1_total,
    option_2_reward / option_2_total,
    option_3_reward / option_3_total,
  ];

  const updateTotalCount = (text) => {
    if (text == option1) {
      const metricIndex = metrics.findIndex((metric) => metric.id === 1);
      const updatedMetrics = [...metrics];
      const updatedMetric = { ...updatedMetrics[metricIndex] };
      updatedMetric.total += 1;
      updatedMetrics[metricIndex] = updatedMetric;
      setMetrics(updatedMetrics);
    }
    if (text == option2) {
      const metricIndex = metrics.findIndex((metric) => metric.id === 2);
      const updatedMetrics = [...metrics];
      const updatedMetric = { ...updatedMetrics[metricIndex] };
      updatedMetric.total += 1;
      updatedMetrics[metricIndex] = updatedMetric;
      setMetrics(updatedMetrics);
    }
    if (text == option3) {
      const metricIndex = metrics.findIndex((metric) => metric.id === 3);
      const updatedMetrics = [...metrics];
      const updatedMetric = { ...updatedMetrics[metricIndex] };
      updatedMetric.total += 1;
      updatedMetrics[metricIndex] = updatedMetric;
      setMetrics(updatedMetrics);
    }
  };

  const updateReward = (text) => {
    if (text == option1) {
      const metricIndex = metrics.findIndex((metric) => metric.id === 1);
      const updatedMetrics = [...metrics];
      const updatedMetric = { ...updatedMetrics[metricIndex] };
      updatedMetric.reward += 1;
      updatedMetrics[metricIndex] = updatedMetric;
      setMetrics(updatedMetrics);
    }
    if (text == option2) {
      const metricIndex = metrics.findIndex((metric) => metric.id === 2);
      const updatedMetrics = [...metrics];
      const updatedMetric = { ...updatedMetrics[metricIndex] };
      updatedMetric.reward += 1;
      updatedMetrics[metricIndex] = updatedMetric;
      setMetrics(updatedMetrics);
    }
    if (text == option3) {
      const metricIndex = metrics.findIndex((metric) => metric.id === 3);
      const updatedMetrics = [...metrics];
      const updatedMetric = { ...updatedMetrics[metricIndex] };
      updatedMetric.reward += 1;
      updatedMetrics[metricIndex] = updatedMetric;
      setMetrics(updatedMetrics);
    }
  };

  useEffect(() => {
    window.localStorage.setItem('MY_APP_STATE', JSON.stringify(metrics));
  }, [metrics]);

  // bandit algorithm for metrics milestone
  useEffect(() => {
      if (Math.random() < 0.3) {
        const selectedLabel = labelOptions[Math.floor(Math.random() * labelOptions.length)];
        localStorage.setItem("button_text", selectedLabel);
        updateTotalCount(selectedLabel);
        setButtonText(selectedLabel);
      } else {
        const selectedLabel = labelOptions[rewards.indexOf(Math.max(...rewards))];
        localStorage.setItem("button_text", selectedLabel);
        updateTotalCount(selectedLabel);
        setButtonText(selectedLabel);
      }

      console.log(metrics[0].reward)
      console.log(metrics[0].total)
      console.log(metrics[1].reward)
      console.log(metrics[1].total)

      console.log(metrics[2].reward)
      console.log(metrics[2].total)

  }, []);

  const handleClick = () => {
    updateReward(buttonText);
  };
    

  return (
    <>

      <Head>
        <title>IdleIvy</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div data-testid='index' className='flex flex-col items-center font-display bg-gradient-to-b from-[#272727] to-[#797979] h-screen justify-center'>
          <div className='mb-[20px]'>
            <h2 data-testid='title' className='text-white font-semibold text-[90px]'>IdleIvy</h2>
          </div>

          <div className='flex flex-row items-center gap-[90px]'>
            {/*Harvard Version*/}
            <div className='flex flex-col items-center'>
              <h2 className='text-white font-semibold text-[40px] mb-[20px]'>Harvard</h2>
              <Link href={"/"}>
                <button type="button" className="text-3xl text-white bg-[#BD1717] px-[35px] py-[10px] w-[250px] h-[100px] rounded-full outline outline-white outline-[7px]"> 
                  Locked
                </button>
              </Link>
            </div>

            {/*Yale Version*/}
            <div className='flex flex-col items-center'>
              <h2 className='text-white font-semibold text-[40px] mb-[20px]'>Yale</h2>
              <Link href={"./contract"}>
                <button id="metric_button" type="button" onClick={handleClick} className="text-3xl text-white bg-[#202B64] px-[35px] py-[10px] w-[250px] h-[100px] rounded-full outline outline-white outline-[7px]">
                  {buttonText}
                </button>
              </Link>
            </div>

            {/*Princeton Version*/}
            <div className='flex flex-col items-center'>
              <h2 className='text-white font-semibold text-[40px] mb-[20px]'>Princeton</h2>
              <Link href={"/"}>
                <button type="button" className="text-3xl text-white bg-[#FF8000] px-[35px] py-[10px] w-[250px] h-[100px] rounded-full outline outline-white outline-[7px]"> 
                  Locked
                </button>
              </Link>
            </div>
          </div>
        

      </div>
      </>
  )
}
